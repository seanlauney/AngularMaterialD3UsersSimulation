{"ast":null,"code":"import _classCallCheck from \"/Users/slauney/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/slauney/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ForceDirectedGraph } from './models/force-directed-graph';\nimport * as d3 from 'd3';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UserDetailsDialogComponent } from '../user-details-dialog/user-details-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nexport var D3Service = /*#__PURE__*/(function () {\n  var D3Service = /*#__PURE__*/function () {\n    /** This service will provide methods to enable user interaction with elements\n      * while maintaining the d3 simulations physics\n      */\n    function D3Service(dialog) {\n      _classCallCheck(this, D3Service);\n\n      this.dialog = dialog;\n    }\n    /** A method to bind a pan and zoom behaviour to an svg element */\n\n\n    _createClass(D3Service, [{\n      key: \"applyZoomableBehaviour\",\n      value: function applyZoomableBehaviour(svgElement, containerElement) {\n        var svg, container, zoomed, zoom;\n        svg = d3.select(svgElement);\n        container = d3.select(containerElement);\n\n        zoomed = function zoomed() {\n          var transform = d3.event.transform;\n          container.attr('transform', 'translate(' + transform.x + ',' + transform.y + ') scale(' + transform.k + ')');\n        };\n\n        zoom = d3.zoom().on('zoom', zoomed);\n        svg.call(zoom);\n      }\n      /** A method to bind a draggable behaviour to an svg element */\n\n    }, {\n      key: \"applyDraggableBehaviour\",\n      value: function applyDraggableBehaviour(element, node, graph) {\n        var d3element = d3.select(element);\n\n        function started() {\n          /** Preventing propagation of dragstart to parent elements */\n          d3.event.sourceEvent.stopPropagation();\n\n          if (!d3.event.active) {\n            graph.simulation.alphaTarget(0.3).restart();\n          }\n\n          d3.event.on('drag', dragged).on('end', ended);\n\n          function dragged() {\n            node.fx = d3.event.x;\n            node.fy = d3.event.y;\n          }\n\n          function ended() {\n            if (!d3.event.active) {\n              graph.simulation.alphaTarget(0);\n            }\n\n            node.fx = null;\n            node.fy = null;\n          }\n        }\n\n        d3element.call(d3.drag().on('start', started));\n      }\n    }, {\n      key: \"applyclickableBehaviour\",\n      value: function applyclickableBehaviour(element, node, graph) {\n        var _this = this;\n\n        var d3element = d3.select(element);\n\n        function started() {\n          /** Preventing propagation of dragstart to parent elements */\n          // d3.event.sourceEvent.stopPropagation();\n          d3element.on('click', clicked);\n\n          function clicked() {\n            _this.dialog.open(UserDetailsDialogComponent, {\n              minWidth: '450px',\n              minHeight: '100%',\n              data: node.user\n            });\n          }\n        }\n\n        started();\n      }\n      /** The interactable graph we will simulate in this article\n      * This method does not interact with the document, purely physical calculations with d3\n      */\n\n    }, {\n      key: \"getForceDirectedGraph\",\n      value: function getForceDirectedGraph(nodes, links, options) {\n        var sg = new ForceDirectedGraph(nodes, links, options);\n        return sg;\n      }\n    }]);\n\n    return D3Service;\n  }();\n\n  D3Service.ɵfac = function D3Service_Factory(t) {\n    return new (t || D3Service)(i0.ɵɵinject(i1.MatDialog));\n  };\n\n  D3Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: D3Service,\n    factory: D3Service.ɵfac\n  });\n  return D3Service;\n})();","map":null,"metadata":{},"sourceType":"module"}