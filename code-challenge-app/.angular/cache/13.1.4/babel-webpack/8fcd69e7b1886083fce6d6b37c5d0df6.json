{"ast":null,"code":"import _classCallCheck from \"/Users/slauney/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/slauney/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { EventEmitter } from '@angular/core';\nimport { Link } from './link';\nimport * as d3 from 'd3';\nvar FORCES = {\n  LINKS: 1 / 50,\n  COLLISION: 1,\n  CHARGE: -1\n};\nexport var ForceDirectedGraph = /*#__PURE__*/function () {\n  function ForceDirectedGraph(nodes, links, options) {\n    _classCallCheck(this, ForceDirectedGraph);\n\n    this.ticker = new EventEmitter();\n    this.nodes = [];\n    this.links = [];\n    this.nodes = nodes;\n    this.links = links;\n    this.initSimulation(options);\n  }\n\n  _createClass(ForceDirectedGraph, [{\n    key: \"connectNodes\",\n    value: function connectNodes(source, target) {\n      var link;\n\n      if (!this.nodes[source] || !this.nodes[target]) {\n        throw new Error('One of the nodes does not exist');\n      }\n\n      link = new Link(source, target);\n      this.simulation.stop();\n      this.links.push(link);\n      this.simulation.alphaTarget(0.3).restart();\n      this.initLinks();\n    }\n  }, {\n    key: \"initNodes\",\n    value: function initNodes() {\n      if (!this.simulation) {\n        throw new Error('simulation was not initialized yet');\n      }\n\n      this.simulation.nodes(this.nodes);\n    }\n  }, {\n    key: \"initLinks\",\n    value: function initLinks() {\n      if (!this.simulation) {\n        throw new Error('simulation was not initialized yet');\n      }\n\n      this.simulation.force('links', d3.forceLink(this.links).id(function (d) {\n        return d['id'];\n      }).strength(FORCES.LINKS));\n    }\n  }, {\n    key: \"initSimulation\",\n    value: function initSimulation(options) {\n      if (!options || !options.width || !options.height) {\n        throw new Error('missing options when initializing simulation');\n      }\n      /** Creating the simulation */\n\n\n      if (!this.simulation) {\n        var ticker = this.ticker;\n        this.simulation = d3.forceSimulation().force('charge', d3.forceManyBody().strength(function (d) {\n          return FORCES.CHARGE * d['r'];\n        })).force('collide', d3.forceCollide().strength(FORCES.COLLISION).radius(function (d) {\n          return d['r'] + 5;\n        }).iterations(2)); // Connecting the d3 ticker to an angular event emitter\n\n        this.simulation.on('tick', function () {\n          ticker.emit(this);\n        });\n        this.initNodes();\n        this.initLinks();\n      }\n      /** Updating the central force of the simulation */\n\n\n      this.simulation.force('centers', d3.forceCenter(options.width / 2, options.height / 2));\n      /** Restarting the simulation internal timer */\n\n      this.simulation.restart();\n    }\n  }]);\n\n  return ForceDirectedGraph;\n}();","map":null,"metadata":{},"sourceType":"module"}